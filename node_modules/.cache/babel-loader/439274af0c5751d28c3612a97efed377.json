{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { IOS, platform } from './platform';\nvar memoized = {};\nexport function computeBrowserInfo(userAgent) {\n  if (memoized[userAgent]) {\n    return memoized[userAgent];\n  }\n\n  var platformName = platform(userAgent);\n  var platformVersion = null;\n\n  if (platformName === IOS) {\n    platformVersion = parseiOSVersion(userAgent);\n  }\n\n  var browserInfo = {\n    userAgent: userAgent,\n    platform: platformName,\n    platformVersion: platformVersion\n  };\n  memoized[userAgent] = browserInfo;\n  return browserInfo;\n}\nexport function parseiOSVersion(userAgent) {\n  if (!userAgent) {\n    return null;\n  }\n\n  var match = userAgent.match(/(iphone os|cpu os|ios) \\b([0-9]+_[0-9]+(?:_[0-9]+)?)\\b/i);\n\n  if (!match) {\n    return null;\n  }\n\n  var _match$2$replace$spli = match[2].replace(/_/g, '.').split('.'),\n      _match$2$replace$spli2 = _slicedToArray(_match$2$replace$spli, 3),\n      major = _match$2$replace$spli2[0],\n      minor = _match$2$replace$spli2[1],\n      patch = _match$2$replace$spli2[2];\n\n  return {\n    major: parseInt(major) || 0,\n    minor: parseInt(minor) || 0,\n    patch: parseInt(patch) || 0\n  };\n}","map":{"version":3,"sources":["../../../src/lib/browser.ts"],"names":["memoized","platformName","platform","platformVersion","parseiOSVersion","browserInfo","userAgent","match","major","minor","patch","parseInt"],"mappings":";AACA,SAAA,GAAA,EAAA,QAAA,QAAA,YAAA;AAQA,IAAMA,QAA0C,GAAhD,EAAA;AAEA,OAAO,SAAA,kBAAA,CAAA,SAAA,EAA4D;AACjE,MAAIA,QAAQ,CAAZ,SAAY,CAAZ,EAAyB;AACvB,WAAOA,QAAQ,CAAf,SAAe,CAAf;AACD;;AAED,MAAMC,YAAY,GAAGC,QAAQ,CAA7B,SAA6B,CAA7B;AAEA,MAAIC,eAA+B,GAAnC,IAAA;;AAEA,MAAIF,YAAY,KAAhB,GAAA,EAA0B;AACxBE,IAAAA,eAAe,GAAGC,eAAe,CAAjCD,SAAiC,CAAjCA;AACD;;AAED,MAAME,WAAwB,GAAG;AAC/BC,IAAAA,SAAS,EADsB,SAAA;AAE/BJ,IAAAA,QAAQ,EAFuB,YAAA;AAG/BC,IAAAA,eAAe,EAAfA;AAH+B,GAAjC;AAMAH,EAAAA,QAAQ,CAARA,SAAQ,CAARA,GAAAA,WAAAA;AAEA,SAAA,WAAA;AACD;AAED,OAAO,SAAA,eAAA,CAAA,SAAA,EAA4D;AACjE,MAAI,CAAJ,SAAA,EAAgB;AACd,WAAA,IAAA;AACD;;AAED,MAAMO,KAAK,GAAGD,SAAS,CAATA,KAAAA,CAAd,yDAAcA,CAAd;;AACA,MAAI,CAAJ,KAAA,EAAY;AACV,WAAA,IAAA;AACD;;AARgE,MAAA,qBAAA,GAUnCC,KAAK,CAALA,CAAK,CAALA,CAAAA,OAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAAA,KAAAA,CAVmC,GAUnCA,CAVmC;AAAA,MAAA,sBAAA,GAAA,cAAA,CAAA,qBAAA,EAAA,CAAA,CAAA;AAAA,MAU1DC,KAV0D,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,MAUnDC,KAVmD,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,MAU5CC,KAV4C,GAAA,sBAAA,CAAA,CAAA,CAAA;;AAYjE,SAAO;AACLF,IAAAA,KAAK,EAAEG,QAAQ,CAARA,KAAQ,CAARA,IADF,CAAA;AAELF,IAAAA,KAAK,EAAEE,QAAQ,CAARA,KAAQ,CAARA,IAFF,CAAA;AAGLD,IAAAA,KAAK,EAAEC,QAAQ,CAARA,KAAQ,CAARA,IAAmB;AAHrB,GAAP;AAKD","sourcesContent":["import { Version } from '../types';\nimport { IOS, OSType, platform } from './platform';\n\nexport interface BrowserInfo {\n  userAgent: string;\n  platform: OSType;\n  platformVersion: Version | null;\n}\n\nconst memoized: { [index: string]: BrowserInfo } = {};\n\nexport function computeBrowserInfo(userAgent: string): BrowserInfo {\n  if (memoized[userAgent]) {\n    return memoized[userAgent];\n  }\n\n  const platformName = platform(userAgent);\n\n  let platformVersion: Version | null = null;\n\n  if (platformName === IOS) {\n    platformVersion = parseiOSVersion(userAgent);\n  }\n\n  const browserInfo: BrowserInfo = {\n    userAgent,\n    platform: platformName,\n    platformVersion,\n  };\n\n  memoized[userAgent] = browserInfo;\n\n  return browserInfo;\n}\n\nexport function parseiOSVersion(userAgent: string): Version | null {\n  if (!userAgent) {\n    return null;\n  }\n\n  const match = userAgent.match(/(iphone os|cpu os|ios) \\b([0-9]+_[0-9]+(?:_[0-9]+)?)\\b/i);\n  if (!match) {\n    return null;\n  }\n\n  const [major, minor, patch] = match[2].replace(/_/g, '.').split('.');\n\n  return {\n    major: parseInt(major) || 0,\n    minor: parseInt(minor) || 0,\n    patch: parseInt(patch) || 0,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}