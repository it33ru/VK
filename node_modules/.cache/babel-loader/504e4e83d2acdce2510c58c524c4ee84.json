{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport classNames from '../../lib/classNames';\nimport usePlatform from '../../hooks/usePlatform';\nimport getClassName from '../../helpers/getClassName';\nimport Text from '../Typography/Text/Text';\nimport Tappable from '../../components/Tappable/Tappable';\nimport { hasReactNode } from '../../lib/utils';\nexport var MiniInfoCell = function MiniInfoCell(props) {\n  var _classNames;\n\n  var platform = usePlatform();\n\n  var before = props.before,\n      after = props.after,\n      mode = props.mode,\n      textWrap = props.textWrap,\n      textLevel = props.textLevel,\n      multiline = props.multiline,\n      children = props.children,\n      className = props.className,\n      restProps = _objectWithoutProperties(props, [\"before\", \"after\", \"mode\", \"textWrap\", \"textLevel\", \"multiline\", \"children\", \"className\"]);\n\n  var Component = restProps.onClick ? Tappable : 'div';\n  var finalTextWrap = multiline ? 'short' : textWrap;\n  return /*#__PURE__*/React.createElement(Component, _extends({}, restProps, {\n    className: classNames(getClassName('MiniInfoCell', platform), (_classNames = {}, _defineProperty(_classNames, \"MiniInfoCell--md-\".concat(mode), mode !== 'base'), _defineProperty(_classNames, \"MiniInfoCell--wr-\".concat(finalTextWrap), finalTextWrap !== 'nowrap'), _classNames), \"MiniInfoCell--lvl-\".concat(textLevel), className)\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MiniInfoCell__icon\"\n  }, before), /*#__PURE__*/React.createElement(Text, {\n    className: \"MiniInfoCell__content\",\n    weight: mode === 'more' ? 'medium' : 'regular'\n  }, children), hasReactNode(after) && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MiniInfoCell__after\"\n  }, after));\n};\nMiniInfoCell.defaultProps = {\n  mode: 'base',\n  textWrap: 'nowrap',\n  textLevel: 'secondary'\n};","map":{"version":3,"sources":["../../../../src/components/MiniInfoCell/MiniInfoCell.tsx"],"names":["MiniInfoCell","platform","usePlatform","before","after","mode","textWrap","textLevel","multiline","children","className","restProps","props","Component","finalTextWrap","classNames","getClassName","hasReactNode"],"mappings":";;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,UAAA,MAAA,sBAAA;AACA,OAAA,WAAA,MAAA,yBAAA;AACA,OAAA,YAAA,MAAA,4BAAA;AACA,OAAA,IAAA,MAAA,yBAAA;AACA,OAAA,QAAA,MAAA,oCAAA;AACA,SAAA,YAAA,QAAA,iBAAA;AAgDA,OAAO,IAAMA,YAAmC,GAAG,SAAtCA,YAAsC,CAAA,KAAA,EAAW;AAAA,MAAA,WAAA;;AAC5D,MAAMC,QAAQ,GAAGC,WAAjB,EAAA;;AAD4D,MAG1DC,MAH0D,GAYxDS,KAZwD,CAAA,MAAA;AAAA,MAI1DR,KAJ0D,GAYxDQ,KAZwD,CAAA,KAAA;AAAA,MAK1DP,IAL0D,GAYxDO,KAZwD,CAAA,IAAA;AAAA,MAM1DN,QAN0D,GAYxDM,KAZwD,CAAA,QAAA;AAAA,MAO1DL,SAP0D,GAYxDK,KAZwD,CAAA,SAAA;AAAA,MAQ1DJ,SAR0D,GAYxDI,KAZwD,CAAA,SAAA;AAAA,MAS1DH,QAT0D,GAYxDG,KAZwD,CAAA,QAAA;AAAA,MAU1DF,SAV0D,GAYxDE,KAZwD,CAAA,SAAA;AAAA,MAWvDD,SAXuD,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,QAAA,EAAA,OAAA,EAAA,MAAA,EAAA,UAAA,EAAA,WAAA,EAAA,WAAA,EAAA,UAAA,EAAA,WAAA,CAAA,CAAA;;AAc5D,MAAME,SAAsB,GAAGF,SAAS,CAATA,OAAAA,GAAAA,QAAAA,GAA/B,KAAA;AACA,MAAMG,aAA8B,GAAGN,SAAS,GAAA,OAAA,GAAhD,QAAA;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEE,IAAA,SAAS,EAAEO,UAAU,CAACC,YAAY,CAAA,cAAA,EAAb,QAAa,CAAb,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAAA,oBAAA,MAAA,CAAA,IAAA,CAAA,EACWX,IAAI,KADf,MAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,oBAAA,MAAA,CAAA,aAAA,CAAA,EAEoBS,aAAa,KAFjC,QAAA,CAAA,EAAA,WAAA,GAAA,qBAAA,MAAA,CAAA,SAAA,CAAA,EAAA,SAAA;AAFvB,GAAA,CAAA,EAAA,aAOE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAPF,MAOE,CAPF,EAAA,aAUE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,SAAS,EADX,uBAAA;AAEE,IAAA,MAAM,EAAET,IAAI,KAAJA,MAAAA,GAAAA,QAAAA,GAA6B;AAFvC,GAAA,EAVF,QAUE,CAVF,EAgBGY,YAAY,CAAZA,KAAY,CAAZA,IAAAA,aACD,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAlBJ,KAkBI,CAjBF,CADF;AAjBK,CAAA;AA2CPjB,YAAY,CAAZA,YAAAA,GAA4B;AAC1BK,EAAAA,IAAI,EADsB,MAAA;AAE1BC,EAAAA,QAAQ,EAFkB,QAAA;AAG1BC,EAAAA,SAAS,EAAE;AAHe,CAA5BP","sourcesContent":["import React, { ElementType, FC, HTMLAttributes, ReactNode } from 'react';\nimport classNames from '../../lib/classNames';\nimport usePlatform from '../../hooks/usePlatform';\nimport getClassName from '../../helpers/getClassName';\nimport Text from '../Typography/Text/Text';\nimport Tappable from '../../components/Tappable/Tappable';\nimport { hasReactNode } from '../../lib/utils';\n\nexport interface MiniInfoCellProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Иконка слева.<br />\n   * Рекомендуется использовать иконки размера 20.\n   */\n  before: ReactNode;\n\n  /**\n   * Содержимое справа.<br />\n   * `<UsersStack size=\"s\" />` или `<Avatar size={24} />`\n   */\n  after?: ReactNode;\n\n  /**\n   * @deprecated Будет удалено в v4. Используйте свойство `textWrap`.\n   */\n  multiline?: boolean;\n\n  /**\n   * Тип ячейки:\n   *\n   * - `base` – базовая ячейка с серой иконкой и серым текстом.<br />\n   * В компонент можно передать `Link`, чтобы визуально сделать часть текста ссылкой.\n   * - `add` – тип ячейки, который показывает, что взаимодействие с ней должно вызывать действие добавления чего-то.\n   * - `more` – взаимодействие с такой ячейкой должно открывать какую-то подробную информацию.\n   */\n  mode?: 'base' | 'add' | 'more';\n\n  /**\n   * Тип отображения текста:\n   *\n   * - `nowrap` – в одну строку, текст не переносится и обрезается.\n   * - `short` – максимально отображается 3 строки, остальное обрезается.\n   * - `full` – текст отображается полностью.\n   */\n  textWrap?: 'nowrap' | 'short' | 'full';\n\n  /**\n   * Стиль текста:\n   *\n   * - `primary` – используйте этот стиль, если хотите выделить информацию в общем списке.<br />Пример использования: подробная информация на странице сообщества\n   * - `secondary` – стиль по-умолчанию.\n   */\n  textLevel?: 'primary' | 'secondary';\n}\n\nexport const MiniInfoCell: FC<MiniInfoCellProps> = (props) => {\n  const platform = usePlatform();\n  const {\n    before,\n    after,\n    mode,\n    textWrap,\n    textLevel,\n    multiline,\n    children,\n    className,\n    ...restProps\n  } = props;\n\n  const Component: ElementType = restProps.onClick ? Tappable : 'div';\n  const finalTextWrap: typeof textWrap = multiline ? 'short' : textWrap;\n\n  return (\n    <Component\n      {...restProps}\n      className={classNames(getClassName('MiniInfoCell', platform), {\n        [`MiniInfoCell--md-${mode}`]: mode !== 'base',\n        [`MiniInfoCell--wr-${finalTextWrap}`]: finalTextWrap !== 'nowrap',\n      }, `MiniInfoCell--lvl-${textLevel}`, className)}\n    >\n      <div className=\"MiniInfoCell__icon\">\n        {before}\n      </div>\n      <Text\n        className=\"MiniInfoCell__content\"\n        weight={mode === 'more' ? 'medium' : 'regular'}\n      >\n        {children}\n      </Text>\n      {hasReactNode(after) &&\n      <div className=\"MiniInfoCell__after\">\n        {after}\n      </div>\n      }\n    </Component>\n  );\n};\n\nMiniInfoCell.defaultProps = {\n  mode: 'base',\n  textWrap: 'nowrap',\n  textLevel: 'secondary',\n};\n"]},"metadata":{},"sourceType":"module"}