{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nvar svgStyle = {\n  display: 'block'\n};\nexport var SvgIcon = function SvgIcon(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      viewBox = _ref.viewBox,\n      id = _ref.id,\n      className = _ref.className,\n      style = _ref.style,\n      fill = _ref.fill,\n      getRootRef = _ref.getRootRef,\n      restProps = _objectWithoutProperties(_ref, [\"width\", \"height\", \"viewBox\", \"id\", \"className\", \"style\", \"fill\", \"getRootRef\"]);\n\n  var size = Math.max(width, height);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, restProps, {\n    ref: getRootRef,\n    className: \"Icon Icon--\".concat(size, \" Icon--w-\").concat(width, \" Icon--h-\").concat(height, \" Icon--\").concat(id, \" \").concat(className),\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      width: width,\n      height: height\n    })\n  }), /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: viewBox,\n    width: width,\n    height: height,\n    style: svgStyle\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#\".concat(id),\n    style: {\n      fill: 'currentColor',\n      color: fill\n    }\n  })));\n};\nSvgIcon.defaultProps = {\n  className: '',\n  style: {}\n};","map":{"version":3,"sources":["../../tmp/SvgIcon.tsx"],"names":["svgStyle","display","SvgIcon","width","height","viewBox","id","className","style","fill","getRootRef","restProps","size","Math","color"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AAUA,IAAMA,QAAQ,GAAG;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAjB;AAEA,OAAO,IAAMC,OAAyB,GAAG,SAA5BA,OAA4B,CAAA,IAAA,EAAsF;AAAA,MAAnFC,KAAmF,GAAA,IAAA,CAAnFA,KAAmF;AAAA,MAA5EC,MAA4E,GAAA,IAAA,CAA5EA,MAA4E;AAAA,MAApEC,OAAoE,GAAA,IAAA,CAApEA,OAAoE;AAAA,MAA3DC,EAA2D,GAAA,IAAA,CAA3DA,EAA2D;AAAA,MAAvDC,SAAuD,GAAA,IAAA,CAAvDA,SAAuD;AAAA,MAA5CC,KAA4C,GAAA,IAAA,CAA5CA,KAA4C;AAAA,MAArCC,IAAqC,GAAA,IAAA,CAArCA,IAAqC;AAAA,MAA/BC,UAA+B,GAAA,IAAA,CAA/BA,UAA+B;AAAA,MAAhBC,SAAgB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,IAAA,EAAA,WAAA,EAAA,OAAA,EAAA,MAAA,EAAA,YAAA,CAAA,CAAA;;AAC7H,MAAMC,IAAI,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,EAAb,MAAaA,CAAb;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEE,IAAA,GAAG,EAFL,UAAA;AAGE,IAAA,SAAS,EAAA,cAAA,MAAA,CAAA,IAAA,EAAA,WAAA,EAAA,MAAA,CAAA,KAAA,EAAA,WAAA,EAAA,MAAA,CAAA,MAAA,EAAA,SAAA,EAAA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,MAAA,CAHX,SAGW,CAHX;AAIE,IAAA,KAAK,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAAcV,MAAAA,KAAK,EAAnB,KAAA;AAAqBC,MAAAA,MAAM,EAANA;AAArB,KAAA;AAJP,GAAA,CAAA,EAAA,aAME,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,OAAO,EAAZ,OAAA;AAAuB,IAAA,KAAK,EAA5B,KAAA;AAAqC,IAAA,MAAM,EAA3C,MAAA;AAAqD,IAAA,KAAK,EAAEJ;AAA5D,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAA,IAAA,MAAA,CAAd,EAAc,CAAd;AAA0B,IAAA,KAAK,EAAE;AAAES,MAAAA,IAAI,EAAN,cAAA;AAAwBK,MAAAA,KAAK,EAAEL;AAA/B;AAAjC,GAAA,CADF,CANF,CADF;AAHK,CAAA;AAiBPP,OAAO,CAAPA,YAAAA,GAAuB;AACrBK,EAAAA,SAAS,EADY,EAAA;AAErBC,EAAAA,KAAK,EAAE;AAFc,CAAvBN","sourcesContent":["import React, { FC, HTMLAttributes, RefCallback, RefObject } from 'react';\n\ninterface SvgIconProps extends HTMLAttributes<HTMLDivElement> {\n  width?: number;\n  height?: number;\n  viewBox?: string;\n  fill?: string;\n  getRootRef?: RefCallback<HTMLDivElement> | RefObject<HTMLDivElement>;\n}\n\nconst svgStyle = { display: 'block' };\n\nexport const SvgIcon: FC<SvgIconProps> = ({ width, height, viewBox, id, className, style, fill, getRootRef, ...restProps }) => {\n  const size = Math.max(width, height);\n\n  return (\n    <div\n      {...restProps}\n      ref={getRootRef}\n      className={`Icon Icon--${size} Icon--w-${width} Icon--h-${height} Icon--${id} ${className}`}\n      style={{ ...style, width, height }}\n    >\n      <svg viewBox={viewBox} width={width} height={height} style={svgStyle}>\n        <use xlinkHref={`#${id}`} style={{ fill: 'currentColor', color: fill }} />\n      </svg>\n    </div>\n  );\n};\n\nSvgIcon.defaultProps = {\n  className: '',\n  style: {},\n};\n"]},"metadata":{},"sourceType":"module"}