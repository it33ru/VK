{"ast":null,"code":"import\"core-js/modules/es.map\";import\"core-js/modules/es.object.to-string\";import\"core-js/modules/es.set\";import\"core-js/modules/es.string.iterator\";import\"core-js/modules/esnext.map.delete-all\";import\"core-js/modules/esnext.map.every\";import\"core-js/modules/esnext.map.filter\";import\"core-js/modules/esnext.map.find\";import\"core-js/modules/esnext.map.find-key\";import\"core-js/modules/esnext.map.from\";import\"core-js/modules/esnext.map.group-by\";import\"core-js/modules/esnext.map.includes\";import\"core-js/modules/esnext.map.key-by\";import\"core-js/modules/esnext.map.key-of\";import\"core-js/modules/esnext.map.map-keys\";import\"core-js/modules/esnext.map.map-values\";import\"core-js/modules/esnext.map.merge\";import\"core-js/modules/esnext.map.of\";import\"core-js/modules/esnext.map.reduce\";import\"core-js/modules/esnext.map.some\";import\"core-js/modules/esnext.map.update\";import\"core-js/modules/esnext.set.add-all\";import\"core-js/modules/esnext.set.delete-all\";import\"core-js/modules/esnext.set.difference\";import\"core-js/modules/esnext.set.every\";import\"core-js/modules/esnext.set.filter\";import\"core-js/modules/esnext.set.find\";import\"core-js/modules/esnext.set.from\";import\"core-js/modules/esnext.set.intersection\";import\"core-js/modules/esnext.set.is-disjoint-from\";import\"core-js/modules/esnext.set.is-subset-of\";import\"core-js/modules/esnext.set.is-superset-of\";import\"core-js/modules/esnext.set.join\";import\"core-js/modules/esnext.set.map\";import\"core-js/modules/esnext.set.of\";import\"core-js/modules/esnext.set.reduce\";import\"core-js/modules/esnext.set.some\";import\"core-js/modules/esnext.set.symmetric-difference\";import\"core-js/modules/esnext.set.union\";import\"core-js/modules/web.dom-collections.iterator\";import React from\"react\";import ReactDOM from\"react-dom\";import bridge from\"@vkontakte/vk-bridge\";import App from\"./App\";// Init VK  Mini App\n// Sends event to client\nbridge.send(\"VKWebAppInit\");// Subscribes to event, sended by client\nbridge.subscribe(function(e){return console.log(e);});//----------------------------\n// Sending event to client\nbridge.send('VKWebAppGetEmail').then(function(data){// Handling received data\nconsole.log(data.email);}).catch(function(error){// Handling an error\n});//----------------------------  \n// Subscribing to receiving events\nbridge.subscribe(function(event){if(!event.detail){return;}var _event$detail=event.detail,type=_event$detail.type,data=_event$detail.data;if(type==='VKWebAppOpenCodeReaderResult'){// Reading result of the Code Reader\nconsole.log(data.code_data);}if(type==='VKWebAppOpenCodeReaderFailed'){// Catching the error\nconsole.log(data.error_type,data.error_data);}});// Sending method\nbridge.send('VKWebAppOpenCodeReader',{});//----------------------------\n//Unsubscribes a function from events listening\n//**Parameters**\n//- `fn` _required_ Event subscribed function\n// **Example**\n//```js\n//const fn = event => {\n// ...\n//};\n// Subscribing\n//bridge.subscribe(fn);\n// Unsubscribing\n//bridge.unsubscribe(fn);\n//``` \n//Checks if an event is available on the current device\n//**Parameters**\n//- `method` _required_ The VK Bridge method\n//### `bridge.isWebView()`\n//Returns `true` if VK Bridge is running in mobile app, or `false` if not\n//### `bridge.isIframe()`\n//Returns `true` if VK Bridge is running in iframe, or `false` if not\n//### `bridge.isEmbedded()`\n//Returns `true` if VK Bridge is running in embedded app, or `false` if not\n//### `bridge.isStandalone()`\n//Returns `true` if VK Bridge is running in standalone app, or `false` if not\n//## Middleware API\n//_Middlewares_ are pieces of code that intercept and process data between sending and receiving. Thus, by creating middlewares, you can easily log data, modify data before sending it, talking to an asynchronous API, etc. If you've used Redux, you were also probably already familiar with the concept—a similar is used here.\n//### `applyMiddleware(middleware1, ..., middlewareN)`\n//Creates the VK Bridge enhancer that applies middleware to the `send`\n//method. This is handy for a variety of task such as logging every sent\n//event. Returns the VK Bridge enhancer applying the middleware.\n//**Parameters**\n//- `middlewareN` A middleware to be applied\n//**Example**\n//```js\n//import bridge, { applyMiddleware } from '@vkontakte/vk-bridge';\n// Logs the result of each sent event\n//const logger = ({ send, subscribe }) => next => async (method, props) => {\n//  const result = await next(method, props);\n//  console.log(result);\n//  return result;\n//};\n//const enhancedBridge = applyMiddleware(logger)(bridge);\n//```\n// Use VK Bridge in browser\n//```html\n//<script src=\"https://unpkg.com/@vkontakte/vk-bridge/dist/browser.min.js\"></script>\n//<script>\n// Sends event to client\n//vkBridge.send('VKWebAppInit');\n//</script>\nbridge.send('VKWebAppGetAuthToken',{\"app_id\":7658421,\"scope\":\"friends, photos, notify, video, wall, offline, groups, notifications, stats, email, market\"});ReactDOM.render(/*#__PURE__*/React.createElement(App,null),document.getElementById(\"root\"));if(process.env.NODE_ENV===\"development\"){import(\"./eruda\").then(function(_ref){var eruda=_ref.default;});//runtime download\n}","map":{"version":3,"sources":["/home/ubuntu/VK/src/index.js"],"names":["React","ReactDOM","bridge","App","send","subscribe","e","console","log","then","data","email","catch","error","event","detail","type","code_data","error_type","error_data","render","document","getElementById","process","env","NODE_ENV","eruda","default"],"mappings":"grDAEA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CAEA;AACA;AACAD,MAAM,CAACE,IAAP,CAAY,cAAZ,EACA;AACAF,MAAM,CAACG,SAAP,CAAiB,SAAAC,CAAC,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAJ,EAAlB,EACA;AACA;AACAJ,MAAM,CACHE,IADH,CACQ,kBADR,EAEGK,IAFH,CAEQ,SAAAC,IAAI,CAAI,CACZ;AACAH,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACC,KAAjB,EACD,CALH,EAMGC,KANH,CAMS,SAAAC,KAAK,CAAI,CACd;AACD,CARH,EASA;AACA;AACAX,MAAM,CAACG,SAAP,CAAiB,SAAAS,KAAK,CAAI,CACxB,GAAI,CAACA,KAAK,CAACC,MAAX,CAAmB,CACjB,OACD,CAHuB,kBAKDD,KAAK,CAACC,MALL,CAKhBC,IALgB,eAKhBA,IALgB,CAKVN,IALU,eAKVA,IALU,CAOxB,GAAIM,IAAI,GAAK,8BAAb,CAA6C,CAC3C;AACAT,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACO,SAAjB,EACD,CAED,GAAID,IAAI,GAAK,8BAAb,CAA6C,CAC3C;AACAT,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACQ,UAAjB,CAA6BR,IAAI,CAACS,UAAlC,EACD,CACF,CAhBD,EAkBA;AACAjB,MAAM,CAACE,IAAP,CAAY,wBAAZ,CAAsC,EAAtC,EAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACE;AACF;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACE;AACA;AACF;AAGAF,MAAM,CAACE,IAAP,CAAY,sBAAZ,CAAoC,CAAC,SAAU,OAAX,CAAoB,QAAS,4FAA7B,CAApC,EACAH,QAAQ,CAACmB,MAAT,cAAgB,oBAAC,GAAD,MAAhB,CAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,EACA,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,aAA7B,CAA4C,CAC1C,OAAO,SAAP,EAAkBhB,IAAlB,CAAuB,cAAwB,IAAZiB,CAAAA,KAAY,MAArBC,OAAqB,CAAE,CAAjD,EAAoD;AACrD","sourcesContent":["import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\n// Sends event to client\nbridge.send(\"VKWebAppInit\");\n// Subscribes to event, sended by client\nbridge.subscribe(e => console.log(e));\n//----------------------------\n// Sending event to client\nbridge\n  .send('VKWebAppGetEmail')\n  .then(data => {\n    // Handling received data\n    console.log(data.email);\n  })\n  .catch(error => {\n    // Handling an error\n  });\n//----------------------------  \n// Subscribing to receiving events\nbridge.subscribe(event => {\n  if (!event.detail) {\n    return;\n  }\n\n  const { type, data } = event.detail;\n\n  if (type === 'VKWebAppOpenCodeReaderResult') {\n    // Reading result of the Code Reader\n    console.log(data.code_data);\n  }\n\n  if (type === 'VKWebAppOpenCodeReaderFailed') {\n    // Catching the error\n    console.log(data.error_type, data.error_data);\n  }\n});\n\n// Sending method\nbridge.send('VKWebAppOpenCodeReader', {});  \n\n//----------------------------\n//Unsubscribes a function from events listening\n\n//**Parameters**\n\n//- `fn` _required_ Event subscribed function\n\n// **Example**\n\n//```js\n//const fn = event => {\n  // ...\n//};\n\n// Subscribing\n//bridge.subscribe(fn);\n\n// Unsubscribing\n//bridge.unsubscribe(fn);\n//``` \n\n//Checks if an event is available on the current device\n\n//**Parameters**\n\n//- `method` _required_ The VK Bridge method\n\n//### `bridge.isWebView()`\n\n//Returns `true` if VK Bridge is running in mobile app, or `false` if not\n\n//### `bridge.isIframe()`\n\n//Returns `true` if VK Bridge is running in iframe, or `false` if not\n\n//### `bridge.isEmbedded()`\n\n//Returns `true` if VK Bridge is running in embedded app, or `false` if not\n\n//### `bridge.isStandalone()`\n\n//Returns `true` if VK Bridge is running in standalone app, or `false` if not\n\n//## Middleware API\n\n//_Middlewares_ are pieces of code that intercept and process data between sending and receiving. Thus, by creating middlewares, you can easily log data, modify data before sending it, talking to an asynchronous API, etc. If you've used Redux, you were also probably already familiar with the concept—a similar is used here.\n\n//### `applyMiddleware(middleware1, ..., middlewareN)`\n\n//Creates the VK Bridge enhancer that applies middleware to the `send`\n//method. This is handy for a variety of task such as logging every sent\n//event. Returns the VK Bridge enhancer applying the middleware.\n\n//**Parameters**\n\n//- `middlewareN` A middleware to be applied\n\n//**Example**\n\n//```js\n//import bridge, { applyMiddleware } from '@vkontakte/vk-bridge';\n\n// Logs the result of each sent event\n//const logger = ({ send, subscribe }) => next => async (method, props) => {\n//  const result = await next(method, props);\n//  console.log(result);\n//  return result;\n//};\n\n//const enhancedBridge = applyMiddleware(logger)(bridge);\n//```\n// Use VK Bridge in browser\n//```html\n//<script src=\"https://unpkg.com/@vkontakte/vk-bridge/dist/browser.min.js\"></script>\n\n//<script>\n  // Sends event to client\n  //vkBridge.send('VKWebAppInit');\n//</script>\n \n\nbridge.send('VKWebAppGetAuthToken', {\"app_id\": 7658421, \"scope\": \"friends, photos, notify, video, wall, offline, groups, notifications, stats, email, market\"})\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"]},"metadata":{},"sourceType":"module"}