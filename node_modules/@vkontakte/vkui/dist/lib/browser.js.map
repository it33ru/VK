{"version":3,"sources":["../../src/lib/browser.ts"],"names":["memoized","computeBrowserInfo","userAgent","platformName","platformVersion","IOS","parseiOSVersion","browserInfo","platform","match","replace","split","major","minor","patch","parseInt"],"mappings":";;;;;;;;;;;;AACA;;AAQA,IAAMA,QAA0C,GAAG,EAAnD;;AAEO,SAASC,kBAAT,CAA4BC,SAA5B,EAA4D;AACjE,MAAIF,QAAQ,CAACE,SAAD,CAAZ,EAAyB;AACvB,WAAOF,QAAQ,CAACE,SAAD,CAAf;AACD;;AAED,MAAMC,YAAY,GAAG,wBAASD,SAAT,CAArB;AAEA,MAAIE,eAA+B,GAAG,IAAtC;;AAEA,MAAID,YAAY,KAAKE,aAArB,EAA0B;AACxBD,IAAAA,eAAe,GAAGE,eAAe,CAACJ,SAAD,CAAjC;AACD;;AAED,MAAMK,WAAwB,GAAG;AAC/BL,IAAAA,SAAS,EAATA,SAD+B;AAE/BM,IAAAA,QAAQ,EAAEL,YAFqB;AAG/BC,IAAAA,eAAe,EAAfA;AAH+B,GAAjC;AAMAJ,EAAAA,QAAQ,CAACE,SAAD,CAAR,GAAsBK,WAAtB;AAEA,SAAOA,WAAP;AACD;;AAEM,SAASD,eAAT,CAAyBJ,SAAzB,EAA4D;AACjE,MAAI,CAACA,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AAED,MAAMO,KAAK,GAAGP,SAAS,CAACO,KAAV,CAAgB,yDAAhB,CAAd;;AACA,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AARgE,8BAUnCA,KAAK,CAAC,CAAD,CAAL,CAASC,OAAT,CAAiB,IAAjB,EAAuB,GAAvB,EAA4BC,KAA5B,CAAkC,GAAlC,CAVmC;AAAA;AAAA,MAU1DC,KAV0D;AAAA,MAUnDC,KAVmD;AAAA,MAU5CC,KAV4C;;AAYjE,SAAO;AACLF,IAAAA,KAAK,EAAEG,QAAQ,CAACH,KAAD,CAAR,IAAmB,CADrB;AAELC,IAAAA,KAAK,EAAEE,QAAQ,CAACF,KAAD,CAAR,IAAmB,CAFrB;AAGLC,IAAAA,KAAK,EAAEC,QAAQ,CAACD,KAAD,CAAR,IAAmB;AAHrB,GAAP;AAKD","sourcesContent":["import { Version } from '../types';\nimport { IOS, OSType, platform } from './platform';\n\nexport interface BrowserInfo {\n  userAgent: string;\n  platform: OSType;\n  platformVersion: Version | null;\n}\n\nconst memoized: { [index: string]: BrowserInfo } = {};\n\nexport function computeBrowserInfo(userAgent: string): BrowserInfo {\n  if (memoized[userAgent]) {\n    return memoized[userAgent];\n  }\n\n  const platformName = platform(userAgent);\n\n  let platformVersion: Version | null = null;\n\n  if (platformName === IOS) {\n    platformVersion = parseiOSVersion(userAgent);\n  }\n\n  const browserInfo: BrowserInfo = {\n    userAgent,\n    platform: platformName,\n    platformVersion,\n  };\n\n  memoized[userAgent] = browserInfo;\n\n  return browserInfo;\n}\n\nexport function parseiOSVersion(userAgent: string): Version | null {\n  if (!userAgent) {\n    return null;\n  }\n\n  const match = userAgent.match(/(iphone os|cpu os|ios) \\b([0-9]+_[0-9]+(?:_[0-9]+)?)\\b/i);\n  if (!match) {\n    return null;\n  }\n\n  const [major, minor, patch] = match[2].replace(/_/g, '.').split('.');\n\n  return {\n    major: parseInt(major) || 0,\n    minor: parseInt(minor) || 0,\n    patch: parseInt(patch) || 0,\n  };\n}\n"],"file":"browser.js"}