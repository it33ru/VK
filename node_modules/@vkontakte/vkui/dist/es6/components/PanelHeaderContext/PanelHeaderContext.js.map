{"version":3,"sources":["../../../../src/components/PanelHeaderContext/PanelHeaderContext.tsx"],"names":["React","Component","FixedLayout","classNames","getClassName","animationEvent","withPlatform","PanelHeaderContext","closing","createRef","setState","prevProps","props","opened","waitAnimationFinish","onAnimationFinish","eventHandler","elementRef","current","supported","removeEventListener","name","addEventListener","clearTimeout","animationFinishTimeout","setTimeout","children","className","onClose","platform","restProps","state","baseClassNames"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAA4D,OAA5D;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;IAYMC,kB;;;;;;;;;;;;;;;;4DAK6B;AAC/BC,MAAAA,OAAO,EAAE;AADsB,K;;8EAIOR,KAAK,CAACS,SAAN,E;;;;wEAyBN,YAAM;AACtC,YAAKC,QAAL,CAAc;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,K;;;;;;;uCAvBkBG,S,EAAoC;AACrD,UAAI,KAAKC,KAAL,CAAWC,MAAX,KAAsBF,SAAS,CAACE,MAApC,EAA4C;AAC1C,YAAI,KAAKD,KAAL,CAAWC,MAAX,KAAsB,KAA1B,EAAiC;AAC/B,eAAKH,QAAL,CAAc;AAAEF,YAAAA,OAAO,EAAE;AAAX,WAAd;AACA,eAAKM,mBAAL,CAAyB,KAAKC,iBAA9B;AACD;AACF;AACF;;;wCAEmBC,Y,EAA4B;AAC9C,UAAI,KAAKC,UAAL,CAAgBC,OAApB,EAA6B;AAC3B,YAAIb,cAAc,CAACc,SAAnB,EAA8B;AAC5B,eAAKF,UAAL,CAAgBC,OAAhB,CAAwBE,mBAAxB,CAA4Cf,cAAc,CAACgB,IAA3D,EAAiEL,YAAjE;AACA,eAAKC,UAAL,CAAgBC,OAAhB,CAAwBI,gBAAxB,CAAyCjB,cAAc,CAACgB,IAAxD,EAA8DL,YAA9D;AACD,SAHD,MAGO;AACLO,UAAAA,YAAY,CAAC,KAAKC,sBAAN,CAAZ;AACA,eAAKA,sBAAL,GAA8BC,UAAU,CAACT,YAAD,EAAe,GAAf,CAAxC;AACD;AACF;AACF;;;6BAMQ;AAAA,wBACkE,KAAKJ,KADvE;AAAA,UACCc,QADD,eACCA,QADD;AAAA,UACWC,SADX,eACWA,SADX;AAAA,UACsBd,MADtB,eACsBA,MADtB;AAAA,UAC8Be,OAD9B,eAC8BA,OAD9B;AAAA,UACuCC,QADvC,eACuCA,QADvC;AAAA,UACoDC,SADpD;;AAAA,UAECtB,OAFD,GAEa,KAAKuB,KAFlB,CAECvB,OAFD;AAGP,UAAMwB,cAAc,GAAG5B,YAAY,CAAC,oBAAD,EAAuByB,QAAvB,CAAnC;AAEA,0BACE,oBAAC,WAAD,eAAiBC,SAAjB;AAA4B,QAAA,SAAS,EAAE3B,UAAU,CAAC6B,cAAD,EAAiB;AAChE,wCAA8BnB,MADkC;AAEhE,yCAA+BL;AAFiC,SAAjB,EAG9CmB,SAH8C,CAAjD;AAGe,QAAA,QAAQ,EAAC;AAHxB,uBAIE;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAwC,QAAA,GAAG,EAAE,KAAKV;AAAlD,SACG,CAACJ,MAAM,IAAIL,OAAX,KAAuBkB,QAD1B,CAJF,EAOG,CAACb,MAAM,IAAIL,OAAX,kBAAuB;AAAK,QAAA,OAAO,EAAEoB,OAAd;AAAuB,QAAA,SAAS,EAAC;AAAjC,QAP1B,CADF;AAWD;;;;EAtD8B3B,S;;gBAA3BM,kB,kBACoD;AACtDM,EAAAA,MAAM,EAAE;AAD8C,C;;AAwD1D,eAAeP,YAAY,CAACC,kBAAD,CAA3B","sourcesContent":["import React, { Component, HTMLAttributes, RefObject } from 'react';\nimport FixedLayout from '../FixedLayout/FixedLayout';\nimport classNames from '../../lib/classNames';\nimport getClassName from '../../helpers/getClassName';\nimport { animationEvent } from '../../lib/supportEvents';\nimport withPlatform from '../../hoc/withPlatform';\nimport { HasPlatform } from '../../types';\n\nexport interface PanelHeaderContextProps extends HTMLAttributes<HTMLDivElement>, HasPlatform {\n  opened: boolean;\n  onClose(): void;\n}\n\nexport interface PanelHeaderContextState {\n  closing: boolean;\n}\n\nclass PanelHeaderContext extends Component<PanelHeaderContextProps, PanelHeaderContextState> {\n  static defaultProps: Partial<PanelHeaderContextProps> = {\n    opened: false,\n  };\n\n  state: PanelHeaderContextState = {\n    closing: false,\n  };\n\n  elementRef: RefObject<HTMLDivElement> = React.createRef();\n\n  private animationFinishTimeout: ReturnType<typeof setTimeout>;\n\n  componentDidUpdate(prevProps: PanelHeaderContextProps) {\n    if (this.props.opened !== prevProps.opened) {\n      if (this.props.opened === false) {\n        this.setState({ closing: true });\n        this.waitAnimationFinish(this.onAnimationFinish);\n      }\n    }\n  }\n\n  waitAnimationFinish(eventHandler: VoidFunction) {\n    if (this.elementRef.current) {\n      if (animationEvent.supported) {\n        this.elementRef.current.removeEventListener(animationEvent.name, eventHandler);\n        this.elementRef.current.addEventListener(animationEvent.name, eventHandler);\n      } else {\n        clearTimeout(this.animationFinishTimeout);\n        this.animationFinishTimeout = setTimeout(eventHandler, 200);\n      }\n    }\n  }\n\n  onAnimationFinish: VoidFunction = () => {\n    this.setState({ closing: false });\n  };\n\n  render() {\n    const { children, className, opened, onClose, platform, ...restProps } = this.props;\n    const { closing } = this.state;\n    const baseClassNames = getClassName('PanelHeaderContext', platform);\n\n    return (\n      <FixedLayout {...restProps} className={classNames(baseClassNames, {\n        'PanelHeaderContext--opened': opened,\n        'PanelHeaderContext--closing': closing,\n      }, className)} vertical=\"top\">\n        <div className=\"PanelHeaderContext__in\" ref={this.elementRef}>\n          {(opened || closing) && children}\n        </div>\n        {(opened || closing) && <div onClick={onClose} className=\"PanelHeaderContext__fade\" />}\n      </FixedLayout>\n    );\n  }\n}\n\nexport default withPlatform(PanelHeaderContext);\n"],"file":"PanelHeaderContext.js"}