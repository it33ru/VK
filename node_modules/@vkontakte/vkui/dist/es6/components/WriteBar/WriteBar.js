import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useEffect, useRef } from 'react';
import { usePlatform } from '../../hooks/usePlatform';
import { hasReactNode, isFunction, setRef } from '../../lib/utils';
import { classNames } from '../../lib/classNames';
import { getClassName } from '../../helpers/getClassName';
export var WriteBar = function WriteBar(props) {
  var platform = usePlatform();

  var className = props.className,
      style = props.style,
      before = props.before,
      inlineAfter = props.inlineAfter,
      after = props.after,
      value = props.value,
      onChange = props.onChange,
      getRootRef = props.getRootRef,
      getRef = props.getRef,
      onHeightChange = props.onHeightChange,
      restProps = _objectWithoutProperties(props, ["className", "style", "before", "inlineAfter", "after", "value", "onChange", "getRootRef", "getRef", "onHeightChange"]);

  var isControlledOutside = value != null;
  var textareaRef = useRef(null);
  var textareaMinHeightRef = useRef(null);

  var resize = function resize() {
    var textareaEl = textareaRef.current;

    if (!textareaEl) {
      return;
    }

    var offsetHeight = textareaEl.offsetHeight,
        scrollHeight = textareaEl.scrollHeight;
    var style = window.getComputedStyle(textareaEl);
    var paddingTop = parseInt(style.paddingTop);
    var paddingBottom = parseInt(style.paddingBottom);

    if (textareaMinHeightRef.current === null) {
      textareaMinHeightRef.current = offsetHeight;
    }

    var diff = paddingTop + paddingBottom + 10;

    if (scrollHeight + diff <= offsetHeight) {
      diff = 0;
    }

    textareaEl.style.height = '0px';
    var height = textareaEl.scrollHeight - diff / 4;
    textareaEl.style.height = String(Math.max(height, textareaMinHeightRef.current)) + 'px';

    if (isFunction(onHeightChange)) {
      onHeightChange();
    }
  };

  var onTextareaChange = function onTextareaChange(event) {
    if (isFunction(onChange)) {
      onChange(event);
    }

    if (!isControlledOutside) {
      resize();
    }
  };

  var getTextareaElRef = function getTextareaElRef(element) {
    textareaRef.current = element;
    setRef(element, getRef);
  };

  useEffect(function () {
    resize();
  }, [value]);
  return /*#__PURE__*/React.createElement("div", {
    ref: getRootRef,
    className: classNames(getClassName('WriteBar', platform), className),
    style: style
  }, /*#__PURE__*/React.createElement("form", {
    className: "WriteBar__form",
    onSubmit: function onSubmit(e) {
      return e.preventDefault();
    }
  }, hasReactNode(before) && /*#__PURE__*/React.createElement("div", {
    className: "WriteBar__before"
  }, before), /*#__PURE__*/React.createElement("div", {
    className: "WriteBar__formIn"
  }, /*#__PURE__*/React.createElement("textarea", _extends({}, restProps, {
    className: "WriteBar__textarea",
    onChange: onTextareaChange,
    ref: getTextareaElRef,
    value: value
  })), hasReactNode(inlineAfter) && /*#__PURE__*/React.createElement("div", {
    className: "WriteBar__inlineAfter"
  }, inlineAfter)), hasReactNode(after) && /*#__PURE__*/React.createElement("div", {
    className: "WriteBar__after"
  }, after)));
};
//# sourceMappingURL=WriteBar.js.map