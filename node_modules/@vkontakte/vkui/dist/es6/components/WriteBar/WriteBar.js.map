{"version":3,"sources":["../../../../src/components/WriteBar/WriteBar.tsx"],"names":["React","useEffect","useRef","usePlatform","hasReactNode","isFunction","setRef","classNames","getClassName","WriteBar","props","platform","className","style","before","inlineAfter","after","value","onChange","getRootRef","getRef","onHeightChange","restProps","isControlledOutside","textareaRef","textareaMinHeightRef","resize","textareaEl","current","offsetHeight","scrollHeight","window","getComputedStyle","paddingTop","parseInt","paddingBottom","diff","height","String","Math","max","onTextareaChange","event","getTextareaElRef","element","e","preventDefault"],"mappings":"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","sourcesContent":["import React, {\n  ChangeEventHandler,\n  FC,\n  ReactNode,\n  useEffect,\n  useRef,\n  TextareaHTMLAttributes,\n} from 'react';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { hasReactNode, isFunction, setRef } from '../../lib/utils';\nimport { classNames } from '../../lib/classNames';\nimport { getClassName } from '../../helpers/getClassName';\nimport { HasRef, HasRootRef } from '../../types';\n\nexport interface WriteBarProps extends TextareaHTMLAttributes<HTMLTextAreaElement>, HasRootRef<HTMLDivElement>, HasRef<HTMLTextAreaElement> {\n  /**\n   * Содержимое, отображаемое слево от поля ввода.\n   */\n  before?: ReactNode;\n  /**\n   * Содержимое, отображаемое поверх поля ввода (актуально для iOS)\n   */\n  inlineAfter?: ReactNode;\n  /**\n   * Содержимое, отображаемое справа от поля ввода\n   */\n  after?: ReactNode;\n  /**\n   * Вызывается при смене высоты поля ввода\n   */\n  onHeightChange?: VoidFunction;\n\n  children?: never;\n}\n\nexport const WriteBar: FC<WriteBarProps> = (props) => {\n  const platform = usePlatform();\n  const {\n    className,\n    style,\n\n    before,\n    inlineAfter,\n    after,\n\n    value,\n    onChange,\n\n    getRootRef,\n    getRef,\n    onHeightChange,\n    ...restProps\n  } = props;\n\n  const isControlledOutside = value != null;\n\n  const textareaRef = useRef<HTMLTextAreaElement | null>(null);\n  const textareaMinHeightRef = useRef<number | null>(null);\n\n  const resize = () => {\n    const textareaEl = textareaRef.current;\n    if (!textareaEl) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight } = textareaEl;\n    const style = window.getComputedStyle(textareaEl);\n    const paddingTop = parseInt(style.paddingTop);\n    const paddingBottom = parseInt(style.paddingBottom);\n\n    if (textareaMinHeightRef.current === null) {\n      textareaMinHeightRef.current = offsetHeight;\n    }\n\n    let diff = paddingTop + paddingBottom + 10;\n\n    if (scrollHeight + diff <= offsetHeight) {\n      diff = 0;\n    }\n\n    textareaEl.style.height = '0px';\n\n    const height = textareaEl.scrollHeight - diff / 4;\n    textareaEl.style.height = String(Math.max(height, textareaMinHeightRef.current)) + 'px';\n\n    if (isFunction(onHeightChange)) {\n      onHeightChange();\n    }\n  };\n\n  const onTextareaChange: ChangeEventHandler<HTMLTextAreaElement> = (event) => {\n    if (isFunction(onChange)) {\n      onChange(event);\n    }\n\n    if (!isControlledOutside) {\n      resize();\n    }\n  };\n\n  const getTextareaElRef = (element: HTMLTextAreaElement) => {\n    textareaRef.current = element;\n    setRef(element, getRef);\n  };\n\n  useEffect(() => {\n    resize();\n  }, [value]);\n\n  return (\n    <div\n      ref={getRootRef}\n      className={classNames(getClassName('WriteBar', platform), className)}\n      style={style}\n    >\n      <form className=\"WriteBar__form\" onSubmit={(e) => e.preventDefault()}>\n        {hasReactNode(before) &&\n        <div className=\"WriteBar__before\">\n          {before}\n        </div>\n        }\n\n        <div className=\"WriteBar__formIn\">\n          <textarea\n            {...restProps}\n            className=\"WriteBar__textarea\"\n            onChange={onTextareaChange}\n            ref={getTextareaElRef}\n            value={value}\n          />\n\n          {hasReactNode(inlineAfter) &&\n          <div className=\"WriteBar__inlineAfter\">\n            {inlineAfter}\n          </div>\n          }\n        </div>\n\n        {hasReactNode(after) &&\n        <div className=\"WriteBar__after\">\n          {after}\n        </div>\n        }\n      </form>\n    </div>\n  );\n};\n"],"file":"WriteBar.js"}