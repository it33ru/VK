"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WriteBar = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _usePlatform = require("../../hooks/usePlatform");

var _utils = require("../../lib/utils");

var _classNames = require("../../lib/classNames");

var _getClassName = require("../../helpers/getClassName");

var WriteBar = function WriteBar(props) {
  var platform = (0, _usePlatform.usePlatform)();
  var className = props.className,
      style = props.style,
      before = props.before,
      inlineAfter = props.inlineAfter,
      after = props.after,
      value = props.value,
      onChange = props.onChange,
      getRootRef = props.getRootRef,
      getRef = props.getRef,
      onHeightChange = props.onHeightChange,
      restProps = (0, _objectWithoutProperties2.default)(props, ["className", "style", "before", "inlineAfter", "after", "value", "onChange", "getRootRef", "getRef", "onHeightChange"]);
  var isControlledOutside = value != null;
  var textareaRef = (0, _react.useRef)(null);
  var textareaMinHeightRef = (0, _react.useRef)(null);

  var resize = function resize() {
    var textareaEl = textareaRef.current;

    if (!textareaEl) {
      return;
    }

    var offsetHeight = textareaEl.offsetHeight,
        scrollHeight = textareaEl.scrollHeight;
    var style = window.getComputedStyle(textareaEl);
    var paddingTop = parseInt(style.paddingTop);
    var paddingBottom = parseInt(style.paddingBottom);

    if (textareaMinHeightRef.current === null) {
      textareaMinHeightRef.current = offsetHeight;
    }

    var diff = paddingTop + paddingBottom + 10;

    if (scrollHeight + diff <= offsetHeight) {
      diff = 0;
    }

    textareaEl.style.height = '0px';
    var height = textareaEl.scrollHeight - diff / 4;
    textareaEl.style.height = String(Math.max(height, textareaMinHeightRef.current)) + 'px';

    if ((0, _utils.isFunction)(onHeightChange)) {
      onHeightChange();
    }
  };

  var onTextareaChange = function onTextareaChange(event) {
    if ((0, _utils.isFunction)(onChange)) {
      onChange(event);
    }

    if (!isControlledOutside) {
      resize();
    }
  };

  var getTextareaElRef = function getTextareaElRef(element) {
    textareaRef.current = element;
    (0, _utils.setRef)(element, getRef);
  };

  (0, _react.useEffect)(function () {
    resize();
  }, [value]);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: getRootRef,
    className: (0, _classNames.classNames)((0, _getClassName.getClassName)('WriteBar', platform), className),
    style: style
  }, /*#__PURE__*/_react.default.createElement("form", {
    className: "WriteBar__form",
    onSubmit: function onSubmit(e) {
      return e.preventDefault();
    }
  }, (0, _utils.hasReactNode)(before) && /*#__PURE__*/_react.default.createElement("div", {
    className: "WriteBar__before"
  }, before), /*#__PURE__*/_react.default.createElement("div", {
    className: "WriteBar__formIn"
  }, /*#__PURE__*/_react.default.createElement("textarea", (0, _extends2.default)({}, restProps, {
    className: "WriteBar__textarea",
    onChange: onTextareaChange,
    ref: getTextareaElRef,
    value: value
  })), (0, _utils.hasReactNode)(inlineAfter) && /*#__PURE__*/_react.default.createElement("div", {
    className: "WriteBar__inlineAfter"
  }, inlineAfter)), (0, _utils.hasReactNode)(after) && /*#__PURE__*/_react.default.createElement("div", {
    className: "WriteBar__after"
  }, after)));
};

exports.WriteBar = WriteBar;
//# sourceMappingURL=WriteBar.js.map