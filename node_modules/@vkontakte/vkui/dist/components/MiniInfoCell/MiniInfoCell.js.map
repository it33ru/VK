{"version":3,"sources":["../../../src/components/MiniInfoCell/MiniInfoCell.tsx"],"names":["MiniInfoCell","props","platform","before","after","mode","textWrap","textLevel","multiline","children","className","restProps","Component","onClick","Tappable","finalTextWrap","defaultProps"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAgDO,IAAMA,YAAmC,GAAG,SAAtCA,YAAsC,CAACC,KAAD,EAAW;AAAA;;AAC5D,MAAMC,QAAQ,GAAG,2BAAjB;AAD4D,MAG1DC,MAH0D,GAYxDF,KAZwD,CAG1DE,MAH0D;AAAA,MAI1DC,KAJ0D,GAYxDH,KAZwD,CAI1DG,KAJ0D;AAAA,MAK1DC,IAL0D,GAYxDJ,KAZwD,CAK1DI,IAL0D;AAAA,MAM1DC,QAN0D,GAYxDL,KAZwD,CAM1DK,QAN0D;AAAA,MAO1DC,SAP0D,GAYxDN,KAZwD,CAO1DM,SAP0D;AAAA,MAQ1DC,SAR0D,GAYxDP,KAZwD,CAQ1DO,SAR0D;AAAA,MAS1DC,QAT0D,GAYxDR,KAZwD,CAS1DQ,QAT0D;AAAA,MAU1DC,SAV0D,GAYxDT,KAZwD,CAU1DS,SAV0D;AAAA,MAWvDC,SAXuD,0CAYxDV,KAZwD;AAc5D,MAAMW,SAAsB,GAAGD,SAAS,CAACE,OAAV,GAAoBC,iBAApB,GAA+B,KAA9D;AACA,MAAMC,aAA8B,GAAGP,SAAS,GAAG,OAAH,GAAaF,QAA7D;AAEA,sBACE,6BAAC,SAAD,6BACMK,SADN;AAEE,IAAA,SAAS,EAAE,0BAAW,2BAAa,cAAb,EAA6BT,QAA7B,CAAX,2FACYG,IADZ,GACqBA,IAAI,KAAK,MAD9B,yEAEYU,aAFZ,GAE8BA,aAAa,KAAK,QAFhD,6CAGaR,SAHb,GAG0BG,SAH1B;AAFb,mBAOE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGP,MADH,CAPF,eAUE,6BAAC,aAAD;AACE,IAAA,SAAS,EAAC,uBADZ;AAEE,IAAA,MAAM,EAAEE,IAAI,KAAK,MAAT,GAAkB,QAAlB,GAA6B;AAFvC,KAIGI,QAJH,CAVF,EAgBG,yBAAaL,KAAb,kBACD;AAAK,IAAA,SAAS,EAAC;AAAf,KACGA,KADH,CAjBF,CADF;AAwBD,CAzCM;;;AA2CPJ,YAAY,CAACgB,YAAb,GAA4B;AAC1BX,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,QAAQ,EAAE,QAFgB;AAG1BC,EAAAA,SAAS,EAAE;AAHe,CAA5B","sourcesContent":["import React, { ElementType, FC, HTMLAttributes, ReactNode } from 'react';\nimport classNames from '../../lib/classNames';\nimport usePlatform from '../../hooks/usePlatform';\nimport getClassName from '../../helpers/getClassName';\nimport Text from '../Typography/Text/Text';\nimport Tappable from '../../components/Tappable/Tappable';\nimport { hasReactNode } from '../../lib/utils';\n\nexport interface MiniInfoCellProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Иконка слева.<br />\n   * Рекомендуется использовать иконки размера 20.\n   */\n  before: ReactNode;\n\n  /**\n   * Содержимое справа.<br />\n   * `<UsersStack size=\"s\" />` или `<Avatar size={24} />`\n   */\n  after?: ReactNode;\n\n  /**\n   * @deprecated Будет удалено в v4. Используйте свойство `textWrap`.\n   */\n  multiline?: boolean;\n\n  /**\n   * Тип ячейки:\n   *\n   * - `base` – базовая ячейка с серой иконкой и серым текстом.<br />\n   * В компонент можно передать `Link`, чтобы визуально сделать часть текста ссылкой.\n   * - `add` – тип ячейки, который показывает, что взаимодействие с ней должно вызывать действие добавления чего-то.\n   * - `more` – взаимодействие с такой ячейкой должно открывать какую-то подробную информацию.\n   */\n  mode?: 'base' | 'add' | 'more';\n\n  /**\n   * Тип отображения текста:\n   *\n   * - `nowrap` – в одну строку, текст не переносится и обрезается.\n   * - `short` – максимально отображается 3 строки, остальное обрезается.\n   * - `full` – текст отображается полностью.\n   */\n  textWrap?: 'nowrap' | 'short' | 'full';\n\n  /**\n   * Стиль текста:\n   *\n   * - `primary` – используйте этот стиль, если хотите выделить информацию в общем списке.<br />Пример использования: подробная информация на странице сообщества\n   * - `secondary` – стиль по-умолчанию.\n   */\n  textLevel?: 'primary' | 'secondary';\n}\n\nexport const MiniInfoCell: FC<MiniInfoCellProps> = (props) => {\n  const platform = usePlatform();\n  const {\n    before,\n    after,\n    mode,\n    textWrap,\n    textLevel,\n    multiline,\n    children,\n    className,\n    ...restProps\n  } = props;\n\n  const Component: ElementType = restProps.onClick ? Tappable : 'div';\n  const finalTextWrap: typeof textWrap = multiline ? 'short' : textWrap;\n\n  return (\n    <Component\n      {...restProps}\n      className={classNames(getClassName('MiniInfoCell', platform), {\n        [`MiniInfoCell--md-${mode}`]: mode !== 'base',\n        [`MiniInfoCell--wr-${finalTextWrap}`]: finalTextWrap !== 'nowrap',\n      }, `MiniInfoCell--lvl-${textLevel}`, className)}\n    >\n      <div className=\"MiniInfoCell__icon\">\n        {before}\n      </div>\n      <Text\n        className=\"MiniInfoCell__content\"\n        weight={mode === 'more' ? 'medium' : 'regular'}\n      >\n        {children}\n      </Text>\n      {hasReactNode(after) &&\n      <div className=\"MiniInfoCell__after\">\n        {after}\n      </div>\n      }\n    </Component>\n  );\n};\n\nMiniInfoCell.defaultProps = {\n  mode: 'base',\n  textWrap: 'nowrap',\n  textLevel: 'secondary',\n};\n"],"file":"MiniInfoCell.js"}