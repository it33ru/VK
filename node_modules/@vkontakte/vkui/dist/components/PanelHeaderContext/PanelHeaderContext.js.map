{"version":3,"sources":["../../../src/components/PanelHeaderContext/PanelHeaderContext.tsx"],"names":["PanelHeaderContext","closing","React","createRef","setState","prevProps","props","opened","waitAnimationFinish","onAnimationFinish","eventHandler","elementRef","current","animationEvent","supported","removeEventListener","name","addEventListener","clearTimeout","animationFinishTimeout","setTimeout","children","className","onClose","platform","restProps","state","baseClassNames","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;IAYMA,kB;;;;;;;;;;;;;;;wFAK6B;AAC/BC,MAAAA,OAAO,EAAE;AADsB,K;0GAIOC,eAAMC,SAAN,E;;oGAyBN,YAAM;AACtC,YAAKC,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,K;;;;;;uCAvBkBI,S,EAAoC;AACrD,UAAI,KAAKC,KAAL,CAAWC,MAAX,KAAsBF,SAAS,CAACE,MAApC,EAA4C;AAC1C,YAAI,KAAKD,KAAL,CAAWC,MAAX,KAAsB,KAA1B,EAAiC;AAC/B,eAAKH,QAAL,CAAc;AAAEH,YAAAA,OAAO,EAAE;AAAX,WAAd;AACA,eAAKO,mBAAL,CAAyB,KAAKC,iBAA9B;AACD;AACF;AACF;;;wCAEmBC,Y,EAA4B;AAC9C,UAAI,KAAKC,UAAL,CAAgBC,OAApB,EAA6B;AAC3B,YAAIC,8BAAeC,SAAnB,EAA8B;AAC5B,eAAKH,UAAL,CAAgBC,OAAhB,CAAwBG,mBAAxB,CAA4CF,8BAAeG,IAA3D,EAAiEN,YAAjE;AACA,eAAKC,UAAL,CAAgBC,OAAhB,CAAwBK,gBAAxB,CAAyCJ,8BAAeG,IAAxD,EAA8DN,YAA9D;AACD,SAHD,MAGO;AACLQ,UAAAA,YAAY,CAAC,KAAKC,sBAAN,CAAZ;AACA,eAAKA,sBAAL,GAA8BC,UAAU,CAACV,YAAD,EAAe,GAAf,CAAxC;AACD;AACF;AACF;;;6BAMQ;AAAA,wBACkE,KAAKJ,KADvE;AAAA,UACCe,QADD,eACCA,QADD;AAAA,UACWC,SADX,eACWA,SADX;AAAA,UACsBf,MADtB,eACsBA,MADtB;AAAA,UAC8BgB,OAD9B,eAC8BA,OAD9B;AAAA,UACuCC,QADvC,eACuCA,QADvC;AAAA,UACoDC,SADpD;AAAA,UAECxB,OAFD,GAEa,KAAKyB,KAFlB,CAECzB,OAFD;AAGP,UAAM0B,cAAc,GAAG,2BAAa,oBAAb,EAAmCH,QAAnC,CAAvB;AAEA,0BACE,6BAAC,oBAAD,6BAAiBC,SAAjB;AAA4B,QAAA,SAAS,EAAE,yBAAWE,cAAX,EAA2B;AAChE,wCAA8BpB,MADkC;AAEhE,yCAA+BN;AAFiC,SAA3B,EAGpCqB,SAHoC,CAAvC;AAGe,QAAA,QAAQ,EAAC;AAHxB,uBAIE;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAwC,QAAA,GAAG,EAAE,KAAKX;AAAlD,SACG,CAACJ,MAAM,IAAIN,OAAX,KAAuBoB,QAD1B,CAJF,EAOG,CAACd,MAAM,IAAIN,OAAX,kBAAuB;AAAK,QAAA,OAAO,EAAEsB,OAAd;AAAuB,QAAA,SAAS,EAAC;AAAjC,QAP1B,CADF;AAWD;;;EAtD8BK,gB;;8BAA3B5B,kB,kBACoD;AACtDO,EAAAA,MAAM,EAAE;AAD8C,C;;eAwD3C,2BAAaP,kBAAb,C","sourcesContent":["import React, { Component, HTMLAttributes, RefObject } from 'react';\nimport FixedLayout from '../FixedLayout/FixedLayout';\nimport classNames from '../../lib/classNames';\nimport getClassName from '../../helpers/getClassName';\nimport { animationEvent } from '../../lib/supportEvents';\nimport withPlatform from '../../hoc/withPlatform';\nimport { HasPlatform } from '../../types';\n\nexport interface PanelHeaderContextProps extends HTMLAttributes<HTMLDivElement>, HasPlatform {\n  opened: boolean;\n  onClose(): void;\n}\n\nexport interface PanelHeaderContextState {\n  closing: boolean;\n}\n\nclass PanelHeaderContext extends Component<PanelHeaderContextProps, PanelHeaderContextState> {\n  static defaultProps: Partial<PanelHeaderContextProps> = {\n    opened: false,\n  };\n\n  state: PanelHeaderContextState = {\n    closing: false,\n  };\n\n  elementRef: RefObject<HTMLDivElement> = React.createRef();\n\n  private animationFinishTimeout: ReturnType<typeof setTimeout>;\n\n  componentDidUpdate(prevProps: PanelHeaderContextProps) {\n    if (this.props.opened !== prevProps.opened) {\n      if (this.props.opened === false) {\n        this.setState({ closing: true });\n        this.waitAnimationFinish(this.onAnimationFinish);\n      }\n    }\n  }\n\n  waitAnimationFinish(eventHandler: VoidFunction) {\n    if (this.elementRef.current) {\n      if (animationEvent.supported) {\n        this.elementRef.current.removeEventListener(animationEvent.name, eventHandler);\n        this.elementRef.current.addEventListener(animationEvent.name, eventHandler);\n      } else {\n        clearTimeout(this.animationFinishTimeout);\n        this.animationFinishTimeout = setTimeout(eventHandler, 200);\n      }\n    }\n  }\n\n  onAnimationFinish: VoidFunction = () => {\n    this.setState({ closing: false });\n  };\n\n  render() {\n    const { children, className, opened, onClose, platform, ...restProps } = this.props;\n    const { closing } = this.state;\n    const baseClassNames = getClassName('PanelHeaderContext', platform);\n\n    return (\n      <FixedLayout {...restProps} className={classNames(baseClassNames, {\n        'PanelHeaderContext--opened': opened,\n        'PanelHeaderContext--closing': closing,\n      }, className)} vertical=\"top\">\n        <div className=\"PanelHeaderContext__in\" ref={this.elementRef}>\n          {(opened || closing) && children}\n        </div>\n        {(opened || closing) && <div onClick={onClose} className=\"PanelHeaderContext__fade\" />}\n      </FixedLayout>\n    );\n  }\n}\n\nexport default withPlatform(PanelHeaderContext);\n"],"file":"PanelHeaderContext.js"}